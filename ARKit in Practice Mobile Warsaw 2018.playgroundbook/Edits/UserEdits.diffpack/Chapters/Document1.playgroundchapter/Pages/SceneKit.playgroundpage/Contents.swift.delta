<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>func material(for contents: Any) -&gt; SCNMaterial {
    let m = SCNMaterial()
    m.diffuse.contents = contents
    m.lightingModel = .physicallyBased
    return m
}

var imageIterator = ImageIterator()
class Sphere: SCNNode{
    let sphere: SCNSphere
    let radius: Float = 0.025
    override init() {
        self.sphere = SCNSphere(radius: CGFloat(radius))
        sphere.materials = [material(for: imageIterator.next())]
        super.init()
        self.geometry = sphere
        let shape = SCNPhysicsShape(geometry: sphere, options: nil)
        self.physicsBody = SCNPhysicsBody(type: .dynamic, shape: shape)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func position(at transform: matrix_float4x4) {
        position = SCNVector3(float4: transform.columns.3)
    }
}

class Plane: SCNNode {
    let plane: SCNBox
    let planeNode: SCNNode
    let planeHeight: Float = 0.1
    
    override init() {
        plane = SCNBox(width: 1, height: CGFloat(planeHeight), length: 1, chamferRadius: 0)
        planeNode = SCNNode(geometry: plane)
        super.init()
        addChildNode(planeNode)
        show(true)
    }
    
    func show(_ visible: Bool) {
        var materials = Array(repeating: material(for: UIColor.clear), count: 6)
        if visible {
            let color = #colorLiteral(red: 0.466666668653488, green: 0.764705896377563, blue: 0.266666680574417, alpha: 1.0).withAlphaComponent(0.7)
            materials[4] = material(for: color)
        }
        plane.materials = materials
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func update(for anchor: ARPlaneAnchor) {
        plane.width = CGFloat(anchor.extent.x)
        plane.length = CGFloat(anchor.extent.z)
        let shape = SCNPhysicsShape(geometry: plane, options: nil)
        planeNode.physicsBody = SCNPhysicsBody(type: .static, shape: shape)
        planeNode.position = SCNVector3(x: anchor.center.x, y: -planeHeight/2, z: anchor.center.z)
    }
    
}


</string>
			<key>ModifiedRange</key>
			<string>{27, 2114}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{27, 0}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>        let location = sender.location(in: sender.view)
        if let result = arView.hitTest(location, options:  nil).first, let sphere = result.node as? Sphere {
            let force = result.localNormal.inverse().multiply(factor: 2)
            sphere.physicsBody?.applyForce(force, asImpulse: true)
        } else if let result = arView.hitTest(location, types: .existingPlane).first {
            let sphere = Sphere()
            sphere.position(at: result.worldTransform)
            sphere.position.y += sphere.radius
            arView.scene.rootNode.addChildNode(sphere)
        }
    }
    var planes: [ARPlaneAnchor: Plane] = [:]
    func renderer(_ renderer: SCNSceneRenderer, didAdd node: SCNNode, for anchor: ARAnchor) {
        if let planeAnchor = anchor as? ARPlaneAnchor {
            let plane = Plane()
            plane.update(for: planeAnchor)
            planes[planeAnchor] = plane
            node.addChildNode(plane)
        }
    }
    
    func renderer(_ renderer: SCNSceneRenderer, didUpdate node: SCNNode, for anchor: ARAnchor) {
        if let planeAnchor = anchor as? ARPlaneAnchor, let plane = planes[planeAnchor] {
            plane.update(for: planeAnchor)
        }
</string>
			<key>ModifiedRange</key>
			<string>{2246, 1206}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{132, 0}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>//  </string>
			<key>ModifiedRange</key>
			<string>{3486, 4}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{166, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Document1.playgroundchapter/Pages/SceneKit.playgroundpage/Contents.swift</string>
</dict>
</plist>
